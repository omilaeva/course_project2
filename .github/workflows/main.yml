name: Run tests and deploy

on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      # Add postgreSQL database as a service
      postgres:
        image: postgres:14
        env:
          # Define env variables using github secrets and variables
          POSTGRES_USER: ${{ secrets.PG_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          POSTGRES_DB: ${{ vars.PG_DB }}
        ports:
          - ${{ vars.PG_PORT }}:${{ vars.PG_PORT }}
        # Check if the server up and running
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Setup repo
        uses: actions/checkout@v2

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: "v1.42.2"

      - name: Flyway Action
        uses: red-gate/FlywayGitHubAction@main
        with:
          url: jdbc:postgresql://postgres:${{ vars.PG_PORT }}/${{ vars.PG_DB }}
          user: ${{ secrets.PG_USER }}
          password: ${{ secrets.PG_PASSWORD }}
          # The directory and .sql file is in the github repo
          locations: filesystem:./flyway/sql
          #extraArgs: -outOfOrder=true

      - name: Build images
        run: docker compose build

      - name: Create .env file
        run: |
          echo "${{ secrets.PROJECT_ENV }}" > project.env

      - name: Run tests
        # Define env variables for PostgreSQL driver in our application
        env:
          PGUSER: ${{ secrets.PG_USER }}
          PGPASSWORD: ${{ secrets.PG_PASSWORD }}
          PGHOST: ${{ vars.PG_HOST }}
          PGPORT: ${{ vars.PG_PORT }}
          PGDATABASE: ${{ vars.PG_DB }}
        run: docker compose run --entrypoint=npx e2e-playwright playwright test --workers=1 && docker compose rm -sf
        
  deploy:
    runs-on: ubuntu-latest
    # Run only if test job succeed
    needs: test
    steps:
      - uses: actions/checkout@v3
      - uses: JorgeLNJunior/render-deploy@v1.4.4
        with:
          # For Render.com deploy you have to create first a
          # Web Service connected to your github account
          # Remember to turn off the Auto-Deploy feature in
          # Advanced settings when creating a web service
          # (or later in Settings section)
          # You can get RENDER_SERVICE_ID from the URL of your
          # web service in Render.com (looks like: srv-csu5k0q3esus73c7ktig)
          service_id: ${{ secrets.RENDER_SERVICE_ID }}
          # To generate API key go to your Account Settings on Render.com
          # Then API Keys, press Create API Key, give it a name
          # and remember to copy it immediately from the output field
          api_key: ${{ secrets.RENDER_API_KEY }}
          clear_cache: true
          wait_deploy: true
          github_deployment: true
          deployment_environment: 'production'
          # You don't need to generate this token
          # see https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication
          github_token: ${{ secrets.GITHUB_TOKEN }}
